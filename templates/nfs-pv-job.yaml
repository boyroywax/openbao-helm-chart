{{- if .Values.persistence.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: create-nfs-pv-{{ include "openbao.fullname" . }}
  namespace: {{ include "openbao.namespace" . }}
  labels:
    {{- include "openbao.labels" . | nindent 4 }}
    component: storage-setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: nfs-pv-creator
        release: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "openbao.serviceAccountName" . }}
      containers:
      - name: pv-creator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          echo "Waiting for NFS server service to be available..."
          NFS_SERVICE_NAME="{{ include "openbao.nfsServerName" . }}"
          while ! kubectl get svc $NFS_SERVICE_NAME -n {{ include "openbao.namespace" . }} > /dev/null 2>&1; do
            echo "Waiting for service $NFS_SERVICE_NAME..."
            sleep 5
          done
          
          # Get the NFS server ClusterIP
          NFS_SERVER_IP=$(kubectl get svc $NFS_SERVICE_NAME -n {{ include "openbao.namespace" . }} -o jsonpath='{.spec.clusterIP}')
          echo "Found NFS Server ClusterIP: $NFS_SERVER_IP"
          
          # Check if PV already exists
          PV_NAME="{{ .Release.Name }}-nfs-pv"
          if kubectl get pv $PV_NAME > /dev/null 2>&1; then
            echo "PersistentVolume $PV_NAME already exists"
            exit 0
          fi
          
          # Create the PersistentVolume with the correct IP
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: $PV_NAME
            labels:
              storage-type: nfs-shared
              component: storage-infrastructure
              release: {{ .Release.Name }}
          spec:
            capacity:
              storage: {{ .Values.persistence.size }}
            volumeMode: Filesystem
            accessModes:
            {{- range .Values.persistence.accessModes }}
            - {{ . }}
            {{- end }}
            persistentVolumeReclaimPolicy: Retain
            storageClassName: ""
            mountOptions:
            - nfsvers=3
            - proto=tcp
            - timeo=600
            - retrans=2
            - hard
            nfs:
              server: \${NFS_SERVER_IP}
              path: /exports
          EOF
          
          echo "âœ… PersistentVolume $PV_NAME created successfully with server: \$NFS_SERVER_IP"
{{- end }}
